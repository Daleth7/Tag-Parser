
Example file with the tags

<MYMARKUPLANGUAGE>
  <THISTAG ATTR = 55 ATTR2 = "Foobar" Space ATTR = "Attributes with spaces in the name will be clumped together: 'SpaceATTR'.">
    This text is also accessible via the string() function.
  </THISTAG>
</MYMARKUPLANGUAGE>
<!-- This is a comment -->
<ANOTHERLANGUAGE>
  <!-- This is another comment -->
  <ONELINETAG ATTR = "One line tags are allowed if they end with '/'." />
  <BORINGTAG  />
</ANOTHERLANGUAGE>



Example use:

struct Parser_Interface : Tag_Parser<> {
  Parser_Interface()
    : Tag_Parser("file.my_markup_language")
  {}
};

Parser_Interface parser;

parser.markup_language("mymarkuplanguage");
    // Sets which tag to look at. If there is more than one tag with the same
    //  name, available() and index(var) can be called to pick a specific tag.
parser.tag("thistag");
cout << "Attr: " << parser.get("attr") << '\n';
cout << "String: " << parser.string() << '\n';
cout << "\n\n";

    // Dump all the data and show it.
Parser_Interface::storage_type data;
parser.dump_to(data);
for(const auto& l : data){
    cout << "Language: " << l.first << '\n';
    for(const auto& p : l.second){
        cout << "|\t" << "- Tag: " << p.first << '\n';
        cout << "|\t\t" << "-- Attributes:\n";
        for(const auto& pi : p.second.first)
            cout << "|\t\t\t--- " << pi.first << " = " << pi.second << '\n';
        cout << "|\t\t" << "-- Wrapped Text: " << p.second.second << '\n';
    }
}



Output:

Attr: 55
String: This text is also accessible via the string() function.


Language: anotherlanguage
|	- Tag: boringtag
|		-- Attributes:
|		-- Wrapped Text: 
|	- Tag: onelinetag
|		-- Attributes:
|			--- attr = one line tags are allowed if they end with '/'.
|		-- Wrapped Text: 
Language: mymarkuplanguage
|	- Tag: thistag
|		-- Attributes:
|			--- attr = 55
|			--- attr2 = foobar
|			--- spaceattr = attributes with spaces in the name will be clumped together: 'spaceattr'.
|		-- Wrapped Text: This text is also accessible via the string() function.
